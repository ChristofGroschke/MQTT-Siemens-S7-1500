FUNCTION_BLOCK "mqttExample"
TITLE = 'MQTT Example Application'
{ S7_Optimized_Access := 'FALSE' }
AUTHOR : Brand
VERSION : 1.0
   VAR_INPUT 
      con : Bool;   // Rise to Connect
      discon : Bool;   // Rise to Disconnect
      pub : Bool;   // Rise to Publish
      sub : Bool;   // Rise to Subscribe
      unsub : Bool;   // Rise to Unsubscribe
   END_VAR

   VAR 
      fcon : Bool;   // flags used for rising trigger detection
      fpub : Bool;   // flags used for rising trigger detection
      fsub : Bool;   // flags used for rising trigger detection
      fdiscon : Bool;   // flags used for rising trigger detection
      funsub : Bool;   // flags used for rising trigger detection
      receivedData : Array[0..1024] of Byte;
      willData : Array[0..128] of Byte;
      willDataLength : Int := 0;
      pubAckReceived : Bool := 0;
      myPublishMessageID : Int := 0;
      publishPayloadData : Array[0..100] of Byte;
      publishPayloadLength : Int := 0;
   END_VAR

   VAR_TEMP 
      i : Int;
   END_VAR


BEGIN
	                  
	(* USER INPUT CONTROLS *)
	
	IF "Clock_0.5Hz" THEN
	    #pub := true;
	ELSE
	    #pub := false;
	END_IF;
	
	// Manual connect. Make con high
	IF #con AND NOT #fcon THEN
	  
	  "mqttCONNECT"(clientID := 'MYRANDOMCLIENTID',
	                withUsername := false,
	                withPassword := false,
	                cleanSession := true,
	                withWill := true,
	                willQos := 0,
	                willRetain := 0,
	                willTopic := 'Connection Lost',
	                willPayload := #willData,
	                willPayloadLength := 0,
	                username := 'a',
	                password := 'b'
	  );
	  
	END_IF;
	#fcon := #con;
	
	// Make discon high to disconnect
	IF #discon AND NOT #fdiscon THEN
	  "mqttDISCONNECT"();
	END_IF;
	#fdiscon := #discon;
	
	// Make pub high to publish
	IF #pub AND NOT #fpub THEN
	  
	  #myPublishMessageID := "mqttPUBLISH"(topic := 'SIEMENSTOPIC',
	                                       messageid := 0, //message id = 0 autogenerate it, > 0 manually set
	                                       payload := #publishPayloadData,
	                                       payloadLength := #publishPayloadLength,
	                                       qos := "mqttGlobals".MQTTQOS1,
	                                       retain := false,
	                                       duplicate := false
	  );
	END_IF;
	#fpub := #pub;
	
	// Make sub high to subscribe
	IF #sub AND NOT #fsub THEN
	  "mqttSUBSCRIBE"(topic := 'SIEMENSTOPIC',
	                  topicQos := "mqttGlobals".MQTTQOS0
	  );
	END_IF;
	#fsub := #sub;
	
	// Make sub high to unsubscribe
	IF #funsub AND NOT #unsub THEN
	  "mqttUNSUBSCRIBE"(topic := 'SIEMENSTOPIC');
	END_IF;
	#funsub := #unsub;
	
	
	(* OTHER *)
	
	// Automatic reconnect example if needed
	IF "mqttData".ethTCPConnected AND ("mqttData"._state < 0) THEN
	  //connect(id := 'CPU313C');
	  "mqttCONNECT"(clientID := 'CPU313C',
	                withUsername := false,
	                withPassword := false,
	                cleanSession := true,
	                withWill := true,
	                willQos := 0,
	                willRetain := 0,
	                willTopic := 'Connection Lost',
	                willPayload := #willData,
	                willPayloadLength := 0,
	                username := 'a',
	                password := 'b'
	  );
	END_IF;
	
	
	(* RECEIVING *)
	
	IF "MQTT_DB".callback THEN
	  
	  // Received a package from a subscription
	  IF "MQTT_DB".callbackPacketType = "mqttGlobals".MQTTPUBLISH THEN
	    "MQTT_DB".callback := false;
	    IF "MQTT_DB".pubTopic = 'SIEMENSTOPIC' THEN
	      IF "MQTT_DB".payloadSize >= 1024 THEN
	        FOR #i := 0 TO 1023 DO
	          #receivedData[#i] := "MQTT_DB".payload[#i];
	        END_FOR;
	      ELSE
	        FOR #i := 0 TO "MQTT_DB".payloadSize - 1 DO
	          #receivedData[#i] := "MQTT_DB".payload[#i];
	        END_FOR;
	      END_IF;
	      
	    END_IF;
	  END_IF;
	  
	  // Received a packet from a handshake response
	  // Example for Qos1 (Single stage handshake with PUBACK response) or Qo2 (Dual stage handshake with PUBCOMP response)
	  IF ("MQTT_DB".callbackPacketType = "mqttGlobals".MQTTPUBACK) OR ("MQTT_DB".callbackPacketType = "mqttGlobals".MQTTPUBCOMP) THEN
	    "MQTT_DB".callback := false;
	    #pubAckReceived := true;
	  END_IF;
	  
	END_IF; //MQTT_DB.callback
	
	
	
END_FUNCTION_BLOCK

ORGANIZATION_BLOCK "OB1"
TITLE = "Main Program Sweep (Cycle)"
{ S7_Optimized_Access := 'FALSE' }
VERSION : 0.1
   VAR_TEMP 
      info : Array[0..19] of Byte;   // Temporary Variables
      ptrPayloadTemp : Any;
      structPtrPayloadTemp AT ptrPayloadTemp : "UDT_STRUCTANYPTR";
   END_VAR


BEGIN
	
	(* IMPORTANT: Uncomment this FOR PN ethernet *)
	"MQTT_DB"( connectionID := 1  // IN: INT, only used for external ethernet (CP)
	           ,ipBlock1 :=  192  // IN: INT, IP address parameter only with internal ethernet (PN)
	           ,ipBlock2 :=  168  // IN: INT, IP address parameter only with PN internal ethernet (PN)
	           ,ipBlock3 :=  2    // IN: INT, IP address parameter only with PN internal ethernet (PN)
	           ,ipBlock4 :=  230    // IN: INT, IP address parameter only with PN internal ethernet (PN)
	           ,ipPort :=  1883   // IN: INT, IP port parameter only with PN internal ethernet (PN)
	 );
	 
	
	(* IMPORTANT: Uncomment this for CP ethernet
	MQTT.MQTT_DB( connectionID :=  1    // IN: INT, only used for external ethernet (CP)
	              ,cpLADDR :=  W#16#100 // IN: WORD, only used for external ethhernet (CP)
	             ); 
	*) 
	
	
	"mqttExample_DB"();    // Example Application
	
END_ORGANIZATION_BLOCK

